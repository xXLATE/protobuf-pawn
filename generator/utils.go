package generator

import (
	"fmt"
	"protobuf-pawn/version"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func genGeneratedHeader(gen *protogen.Plugin, g *protogen.GeneratedFile) {
	g.P("// Code generated by protobuf-pawn. DO NOT EDIT.")

	g.P("// versions:")
	protocGenPawnVersion := version.String()
	protocVersion := "(unknown)"
	if v := gen.Request.GetCompilerVersion(); v != nil {
		protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
	}
	g.P("// \tprotobuf-pawn ", protocGenPawnVersion)
	g.P("// \tprotoc          ", protocVersion)

	g.P()
}

func extractCapitals(input string) string {
	var output strings.Builder

	for _, c := range input {
		if c >= 'A' && c <= 'Z' {
			output.WriteByte(byte(c))
		}
	}

	return output.String()
}

// getMessagePrefix generates message prefix from message name
func getMessagePrefix(messageName string) string {
	// For nested messages like "Person_PhoneNumber", use "PPN"
	if strings.Contains(messageName, "_") {
		parts := strings.Split(messageName, "_")
		result := ""
		for _, part := range parts {
			if len(part) > 0 {
				result += strings.ToUpper(part[0:1])
			}
		}
		return result
	}
	// For simple messages like "Address", use "A"
	return strings.ToUpper(messageName[0:1])
}

// convertFieldName converts snake_case to PascalCase and removes underscores
func convertFieldName(fieldName string) string {
	// Convert snake_case like "lucky_numbers" to "LuckyNumbers"
	if strings.Contains(fieldName, "_") {
		parts := strings.Split(fieldName, "_")
		result := ""
		for _, part := range parts {
			if len(part) > 0 {
				result += strings.Title(part)
			}
		}
		return result
	}
	// Simple field name, just capitalize first letter
	return strings.Title(fieldName)
}
